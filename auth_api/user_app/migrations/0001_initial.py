# Generated by Django 3.2.4 on 2022-10-18 06:52

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import shortuuid.django_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('tenant_app', '0003_alter_tenant_status'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
                ('uuid', shortuuid.django_fields.ShortUUIDField(alphabet=None, help_text='数据uuid', length=22, max_length=64, null=True, prefix='', unique=True)),
                ('user', models.CharField(help_text='用户名', max_length=32, unique=True)),
                ('password', models.CharField(help_text='密码', max_length=128)),
                ('token_version', shortuuid.django_fields.ShortUUIDField(alphabet=None, help_text='版本', length=22, max_length=64, null=True, prefix='', unique=True)),
                ('status', models.CharField(choices=[('FORBIDDEN', 'FORBIDDEN'), ('NORMAL', 'NORMAL')], default='NORMAL', max_length=24)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(db_column='is_superuser', default=False, help_text='Designates that this user has all permissions withoutexplicitly assigning them.', verbose_name='superuser status')),
                ('fk_tenant_id', models.OneToOneField(help_text='租户', on_delete=django.db.models.deletion.CASCADE, to='tenant_app.tenant')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'db_table': 'auth_user',
                'swappable': 'AUTH_USER_MODEL',
                'unique_together': {('user', 'fk_tenant_id')},
            },
        ),
    ]
